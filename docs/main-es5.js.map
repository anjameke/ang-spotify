{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.module.ts","webpack:///src/app/components/about/about.component.ts","webpack:///src/app/components/about/about.component.html","webpack:///src/app/components/album/album.component.ts","webpack:///src/app/components/album/album.component.html","webpack:///src/app/components/app.component.ts","webpack:///src/app/components/app.component.html","webpack:///src/app/components/artist/artist.component.ts","webpack:///src/app/components/artist/artist.component.html","webpack:///src/app/components/navbar/navbar.component.ts","webpack:///src/app/components/navbar/navbar.component.html","webpack:///src/app/components/noPageFound/noPageFound.component.ts","webpack:///src/app/components/noPageFound/noPageFound.component.html","webpack:///src/app/components/playlist/playlist.component.ts","webpack:///src/app/components/playlist/playlist.component.html","webpack:///src/app/components/search/search.component.html","webpack:///src/app/components/search/search.component.ts","webpack:///src/app/components/track/track.component.ts","webpack:///src/app/components/track/track.component.html","webpack:///src/app/services/spotify.service.ts","webpack:///src/app/validators/forbiddenCharacterValidator.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppModule","declarations","providers","bootstrap","AboutComponent","selector","templateUrl","styleUrls","AlbumComponent","spotifyService","route","params","map","subscribe","getAuth","res","getAlbum","access_token","album","console","log","items","AppComponent","title","ArtistComponent","getArtist","artist","getAlbums","albums","dupeAlbums","filter","i","findIndex","a","name","toLowerCase","NavbarComponent","NoPageFoundComponent","PlaylistComponent","cd","query","minLength","required","valueChanges","pipe","input","length","value","errors","trackNames","split","q","createPlaylist","playlistId","forEach","trackName","SearchComponent","search","searchAllowed","searchType","searchQuery","isSearch","checkSearch","get","searchMusic","results","artists","tracks","markForCheck","searchable","isNotSearchable","reset","disable","enable","onSearchChange","TrackComponent","getTrack","track","SpotifyService","_http","clientID","clientId","clientSecret","headers","append","btoa","URLSearchParams","set","body","toString","post","json","type","authToken","searchUrl","uri","artistUrl","artistId","albumsUrl","albumId","albumUrl","trackId","trackUrl","isPublic","description","userId","getUserProfile","user","playlistUrl","trackUri","addToPlaylistUrl","userUrl","forbiddenCharacterValidator","nameRe","control","forbidden","test","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { SearchComponent } from './components/search/search.component';\nimport { AboutComponent } from './components/about/about.component';\nimport { ArtistComponent } from './components/artist/artist.component';\nimport { AlbumComponent } from './components/album/album.component';\nimport { TrackComponent } from './components/track/track.component';\nimport { PlaylistComponent } from './components/playlist/playlist.component';\nimport { NoPageFoundComponent } from './components/noPageFound/noPageFound.component';\n\nconst routes: Routes = [\n  { path: '', component:SearchComponent},\n  { path: 'about', component:AboutComponent},\n  { path: 'artist/:id', component:ArtistComponent},\n  { path: 'album/:id', component:AlbumComponent},\n  { path: 'track/:id', component:TrackComponent},\n  { path: 'playlist', component:PlaylistComponent},\n  { path : '**', component:NoPageFoundComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpModule } from '@angular/http';\nimport { MatRadioModule} from '@angular/material/radio';\nimport { MatFormFieldModule } from '@angular/material/form-field'\nimport { MatInputModule } from '@angular/material/input'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './components/app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { AboutComponent } from './components/about/about.component';\nimport { SearchComponent } from './components/search/search.component';\nimport { ArtistComponent } from './components/artist/artist.component';\nimport { AlbumComponent } from './components/album/album.component';\nimport { TrackComponent } from './components/track/track.component';\nimport { PlaylistComponent } from './components/playlist/playlist.component';\nimport { NoPageFoundComponent } from './components/noPageFound/noPageFound.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    SearchComponent,\n    AboutComponent,\n    ArtistComponent,\n    AlbumComponent,\n    TrackComponent,\n    PlaylistComponent,\n    NoPageFoundComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    FormsModule,\n    HttpModule,\n    MatRadioModule,\n    MatFormFieldModule,\n    MatInputModule,\n    BrowserAnimationsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'about',\n  templateUrl: 'about.component.html',\n  styleUrls: ['about.component.scss']\n})\nexport class AboutComponent {\n  \n}\n","<h4 class=\"title-header\">\n    This is a web app written in Typescript leveraging Angular9 to let users search artists, tracks, or\n    create their own playlists (in progress)...\n</h4>","import { Component, OnInit } from '@angular/core';\nimport { SpotifyService } from '../../services/spotify.service';\nimport { Artist } from '../../models/Artist';\nimport { Album } from '../../models/Album';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'album',\n  templateUrl: 'album.component.html',\n  providers: [SpotifyService]\n})\nexport class AlbumComponent implements OnInit {\n  \n    public id: string;\n    \n    // currently lazy and i don't wanna make all of spotify's associated classes w/n\n    // the model folder. This is json anyways, might as well just parse.\n    public album: any;\n\n    constructor(private spotifyService:SpotifyService,\n                private route:ActivatedRoute) { }\n\n    ngOnInit() {\n        this.route.params\n            .map(params => params['id'])\n            .subscribe((id) => {\n                this.spotifyService.getAuth()\n                    .subscribe(res => {\n                        this.spotifyService.getAlbum(id, res.access_token)\n                        .subscribe(album => {\n                            console.log(album.items);\n                            this.album = album;\n                        });\n                    });\n            });\n    }\n}\n","<div id=\"album\" *ngIf=\"album\">\n    <header class=\"album-header\">\n        <div class=\"album-container\">\n            <!-- <div class=\"col-md-3\"> -->\n                <div *ngIf=\"album.images.length > 0\">\n                    <img class=\"album-album-thumb\" src=\"{{album.images[0].url}}\">\n                </div>\n            <!-- </div> -->\n            <div class=\"col-md-8\">\n                <h4 *ngIf=\"album.artists.length > 0\">\n                    <span *ngFor=\"let artist of album.artists\">\n                        {{artist.name}} \n                    </span>\n                </h4>\n                <h2>{{album.name}}</h2>\n                <h5>Release Date: {{album.release_date}}</h5>\n                <a class=\"btn btn-primary\" href=\"{{album.external_urls.spotify}}\">View in Spotify</a>\n            </div>\n            <!-- <iframe src=\"https://open.spotify.com/embed/album/{{album.id}}\" width=\"376\" height=\"456\" frameborder=\"0\" allowtransparency=\"true\" allow=\"encrypted-media\"></iframe> -->\n        </div>\n    </header>\n    <div class=\"album-tracks\">\n        <h2>Album Tracks</h2>\n        <div class=\"tracks-container\" *ngFor=\"let track of album.tracks.items\">\n            <div class=\"well track\">\n                <h5>{{track.track_number}} - {{track.name}}</h5>\n                <a href=\"{{track.preview_url}}\" target=\"_blank\">Preview Track</a>\n            </div>\n        </div>\n    </div>\n</div>","import { Component } from '@angular/core';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { SearchComponent } from './search/search.component';\nimport { AboutComponent } from './about/about.component';\nimport { AlbumComponent } from './album/album.component';\nimport { TrackComponent } from './track/track.component';\nimport { PlaylistComponent } from './playlist/playlist.component';\nimport { SpotifyService } from '../services/spotify.service'\nimport { HttpModule } from '@angular/http';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n  providers: [HttpModule, SpotifyService]\n})\nexport class AppComponent {\n  title = 'ang-spotify';\n}\n","<navbar></navbar>\n<div class=\"container\">\n    <router-outlet></router-outlet>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { SpotifyService } from '../../services/spotify.service';\nimport { Artist } from '../../models/Artist';\nimport { Album } from '../../models/Album';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'artist',\n  templateUrl: 'artist.component.html',\n  providers: [SpotifyService]\n})\nexport class ArtistComponent implements OnInit {\n  \n    public id: string;\n    \n    // currently lazy and i don't wanna make all of spotify's associated classes w/n\n    // the model folder. This is json anyways, might as well just parse.\n    public artist: any;\n    public albums: Array<Map<any, any>>;\n\n    constructor(private spotifyService:SpotifyService,\n                private route:ActivatedRoute) { }\n\n    ngOnInit() {\n        this.route.params\n            .map(params => params['id'])\n            .subscribe((id) => {\n                this.spotifyService.getAuth()\n                    .subscribe(res => {\n                        this.spotifyService.getArtist(id, 'artist', res.access_token)\n                        .subscribe(artist => {\n                            this.artist = artist;\n                        });\n                        this.spotifyService.getAlbums(id, res.access_token)\n                        .subscribe(albums => {\n                            console.log(albums.items);\n                            let dupeAlbums = albums.items;\n                            this.albums = dupeAlbums.filter((e, i) => dupeAlbums\n                                                    .findIndex(a => a.name.toLowerCase() === e.name.toLowerCase()) === i)\n                        });\n                    });\n            });\n    }\n}\n","<div *ngIf=\"artist\">\n    <header class=\"artist-header\">\n        <div *ngIf=\"artist.images.length > 0\">\n            <img class=\"artist-thumb rounded-circle\" src=\"{{artist.images[0].url}}\">\n        </div>\n        <h1>{{artist.name}}</h1>\n        <p *ngIf=\"artist.genres.length > 0\">\n            Genres: <span *ngFor=\"let genre of artist.genres\">{{genre}} </span>\n        </p>\n    </header>\n    <div class=\"artist-albums container-fluid content-row\">\n        <div class=\"row\">\n            <div class=\"col-md-3 d-flex align-items-stretch\" *ngFor=\"let album of albums\">\n                <div class=\"card h-100\">\n                    <div class=\"well album\">\n                        <div *ngIf=\"album.images.length > 0\">\n                            <img class=\"album-thumb img-thumbnail\" src=\"{{album.images[0].url}}\">\n                            <h4>{{album.name}}</h4>\n                            <a class=\"btn btn-default btn-block\" routerLink=\"/album/{{album.id}}\">Album Details</a>\n                        </div>\n                    </div>\n                </div>\n             </div>\n        </div>\n    </div>\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'navbar',\n  templateUrl: 'navbar.component.html',\n  styleUrls: ['navbar.component.scss']\n})\nexport class NavbarComponent {\n  \n}\n","<nav class=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\n    <a class=\"navbar-brand\" href=\"#\">Spotify Playlist & Search Web App</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarsExampleDefault\" aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n  \n    <div class=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\">\n      <ul class=\"navbar-nav mr-auto\">\n        <li class=\"nav-item active\">\n          <a class=\"nav-link\" [routerLink]=\"['']\">Search <span class=\"sr-only\">(current)</span></a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" [routerLink]=\"['/about']\">About</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" [routerLink]=\"['/playlist']\">Playlist</a>\n        </li>\n      </ul>\n    </div>\n  </nav>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'noPageFound',\n  templateUrl: 'noPageFound.component.html',\n})\n\nexport class NoPageFoundComponent { }","<div class=\"col-md-12\">\n    <div class=\"error-template\">\n        <h3>Oops!</h3>\n        <h2>404 Not Found</h2>\n        <div class=\"error-details mb-3\">\n            Sorry, Requested page not found!\n        </div>\n        <div class=\"error-actions\">\n            <a routerLink=\"/\" class=\"btn btn-danger btn-lg\">\n                Go Back to Home\n            </a>\n        </div>\n    </div>\n</div>","import { Component, OnInit, ChangeDetectorRef, Input, Output, Directive } from '@angular/core';\nimport { SpotifyService } from '../../services/spotify.service';\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged, filter } from 'rxjs/internal/operators';\nimport { forbiddenCharacterValidator } from '../../validators/forbiddenCharacterValidator';\n\n@Component({\n  selector: 'playlist',\n  templateUrl: 'playlist.component.html',\n  providers: [SpotifyService]\n})\n\n\nexport class PlaylistComponent implements OnInit {\n\n  public query: FormControl = new FormControl(\"\", [Validators.minLength(1), forbiddenCharacterValidator(/[^\\.,]/g)]);\n  public name: FormControl = new FormControl(\"\", Validators.required);\n\n  public trackUris: any;\n  public playlistId: string;\n  constructor(private spotifyService: SpotifyService,\n              private cd: ChangeDetectorRef) {\n\n  }\n\n  ngOnInit() {\n\n    // this.search.get('isSearch').valueChanges.pipe(distinctUntilChanged());\n    // this.search.get('searchQuery').valueChanges\n\n    this.name.valueChanges\n      .pipe(\n        filter(input => input.length >=1 ),\n        debounceTime(400),\n        distinctUntilChanged()\n      )\n    this.query.valueChanges\n      .pipe(\n        filter(input => input.length >= 1),\n        debounceTime(400),\n        distinctUntilChanged()\n      ).subscribe(res => {console.log(this.query.value); console.log(this.query.errors)});\n      // console.log(this.query.value);\n    //   .subscribe(query => this.spotifyService.getAuth()\n    //     .subscribe(res => this.spotifyService.searchMusic(query, this.searchType, res.access_token).subscribe(\n    //       res => {\n    //         console.log(this.searchType);\n    //         if (this.searchType === 'artist') {\n    //           this.results = res.artists.items\n    //         } else {\n    //           // /v1/search returns albums info with the tracks blurb, let's purge those so that\n    //           // calling track.id is accurate.\n    //           this.results = res.tracks.items.map(({album, ...items}) => items);\n    //         }\n    //         console.log(this.results);\n    //       })\n    //     ));\n  }\n\n  onSubmit() {\n    let trackNames = this.query.value.split(\",\")\n    this.query.valueChanges.subscribe(q => \n        this.spotifyService.getAuth()\n            .subscribe(res => \n              // this.tracks.forEach(track =>  '')\n              this.spotifyService.createPlaylist(this.name.value, true, '', res.access_token)\n              .subscribe(res => this.playlistId = res.id)))\n    trackNames.forEach(trackName => {\n      // this.trackUris.push(this.spotifyService.g)\n    })          \n  }\n}\n","<h1 class=\"title-header\">Create Playlist</h1>\n<div class=\"form-group\">\n    <div class=\"input-container\">\n        <h6>Playlist name</h6>\n        <input type=\"text\" [formControl]=\"name\" class=\"form-control\" placeholder=\"My default playlist\">\n    </div>\n    <div class=\"input-container\">\n        <h6>Tracks for playlist</h6>\n        <input type=\"text\" [formControl]=\"query\" class=\"form-control\" placeholder=\"Enter comma separated list of tracks\">\n        <div *ngIf=\"query.errors\" class=\"error\"><i>Track list cannot contain special characters</i></div>\n        <!-- <button type=\"submit\" class=\"btn btn-primary create-playlist-btn\" [disabled]=\"query.value < 1 || query.errors\" (click)=onSubmit()>Create playlist</button> -->\n    </div>\n</div>","<h1 *ngIf=\"isNotSearchable()\" class=\"title-header\">Looking for a Track or Artist?</h1>\n<h1 *ngIf=\"isArtistSearch()\" class=\"title-header\">Looking for an {{searchType.charAt(0).toUpperCase() + searchType.slice(1)}}?</h1>\n<h1 *ngIf=\"!isNotSearchable() && !isArtistSearch()\" class=\"title-header\">Looking for a {{searchType.charAt(0).toUpperCase() + searchType.slice(1)}}?</h1>\n<p class=\"lead\">You can use this web app to find your favorite {{isNotSearchable() ? \"tracks or artist\" : searchType}}s, ala Spotify!</p>\n<form>\n    <div class=\"form-group\">\n        <form [formGroup]=\"search\">\n            <div *ngIf=\"searchType\">\n                <input type=\"text\" formControlName=\"searchQuery\" class=\"form-control\" placeholder=\"{{searchType}}s...\">\n            </div>\n        </form>\n        <label id=\"search-type\">Select search type</label>\n        <mat-radio-group \n            aria-labelledby=\"radio-group-label\" \n            class=\"radio-group\"\n            [(ngModel)]=\"searchType\"\n            name=\"searchType\">\n            <mat-radio-button class=\"radio-button\" value=\"artist\" (click)=\"search.get('searchQuery').reset(''); results = null;\" (ngModelChange)=\"onSearchChange($event)\">artist</mat-radio-button>\n            <mat-radio-button class=\"radio-button\" value=\"track\" (click)=\"search.get('searchQuery').reset(''); results = null;\" (ngModelChange)=\"search.get('searchQuery').reset(''); onSearchChange($event)\">track</mat-radio-button>\n        </mat-radio-group>\n    </div>\n</form>\n\n<div *ngIf=\"results\">\n    <div *ngFor=\"let result of results\">\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <div class=\"search-results well\">\n                    <h4 *ngIf=\"isArtistSearch()\">\n                        <a routerLink=\"/artist/{{result.id}}\">{{result.name}}</a>\n                    </h4>\n                    <h4 *ngIf=\"!isArtistSearch()\">\n                        <a routerLink=\"/track/{{result.id}}\">{{result.name}}</a>\n                    </h4>\n                    <div *ngIf=\"searchType === 'artist'\">\n                        <strong>Genres: </strong>\n                        <span *ngFor=\"let genres of result.genres\">{{genres}} </span>\n                    </div>\n                    <div *ngIf=\"searchType === 'track'\">\n                        <strong>Arist: </strong>\n                        <span *ngFor=\"let artist of result.artists\">{{artist.name}} </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit, ChangeDetectorRef, Input, Output, Directive } from '@angular/core';\nimport { SpotifyService } from '../../services/spotify.service';\nimport { FormControl, Validators, FormGroup } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged, filter } from 'rxjs/internal/operators';\nimport { Artist } from '../../models/Artist';\n\n@Component({\n  selector: 'search',\n  templateUrl: 'search.component.html',\n  styleUrls: ['search.component.scss'],\n  providers: [SpotifyService]\n})\n\n\nexport class SearchComponent implements OnInit {\n\n  // public searchStr: string;\n  public results: any;\n  public query: FormControl = new FormControl(\"\", Validators.minLength(1));\n\n  public searchType: string;\n\n  public search: FormGroup = new FormGroup({\n      searchAllowed: new FormControl(this.searchType, Validators.required),\n      searchQuery: new FormControl(\"\", Validators.minLength(1)),\n      isSearch: new FormControl(this.searchType, Validators.required)\n  });\n\n  constructor(private spotifyService: SpotifyService,\n              private cd: ChangeDetectorRef) {\n\n  }\n\n  ngOnInit() {\n    this.checkSearch();\n    this.search.get('isSearch').valueChanges.pipe(distinctUntilChanged());\n    this.search.get('searchQuery').valueChanges\n      .pipe(\n        filter(input => input.length >= 1),\n        debounceTime(400),\n        distinctUntilChanged()\n      )\n      .subscribe(query => this.spotifyService.getAuth()\n        .subscribe(res => this.spotifyService.searchMusic(query, this.searchType, res.access_token).subscribe(\n          res => {\n            console.log(this.searchType);\n            if (this.searchType === 'artist') {\n              this.results = res.artists.items\n            } else {\n              // /v1/search returns albums info with the tracks blurb, let's purge those so that\n              // calling track.id is accurate.\n              this.results = res.tracks.items.map(({album, ...items}) => items);\n            }\n          })\n        ));\n  }\n\n  onSearchChange(search:string) {\n    this.searchType = search;\n    this.cd.markForCheck();\n  }\n\n  checkSearch() {\n    this.search.get('searchAllowed').valueChanges.\n      subscribe(searchable => {\n        if (this.isNotSearchable()) {\n          this.search.get('searchAllowed').reset();\n          this.search.get('searchAllowed').disable();\n        } else {\n          this.search.get('searchAllowed').enable();\n        }\n      });\n  }\n\n  public isNotSearchable() {\n    return !this.searchType || this.searchType.length === 0;\n  }\n\n  public isArtistSearch() {\n    return this.searchType === 'artist';\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { SpotifyService } from '../../services/spotify.service';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'track',\n  templateUrl: 'track.component.html',\n  providers: [SpotifyService]\n})\nexport class TrackComponent implements OnInit {\n  \n    public id: string;\n    \n    // currently lazy and i don't wanna make all of spotify's associated classes w/n\n    // the model folder. This is json anyways, might as well just parse.\n    public track: any;\n    // public albums: Array<Map<any, any>>;\n\n    constructor(private spotifyService:SpotifyService,\n                private route:ActivatedRoute) { }\n\n    ngOnInit() {\n        this.route.params\n            .map(params => params['id'])\n            .subscribe((id) => {\n                this.spotifyService.getAuth()\n                    .subscribe(res => {\n                        this.spotifyService.getTrack(id, res.access_token)\n                            .subscribe(track => {\n                                this.track = track;\n                            });\n                    });\n            });\n    }\n}\n","<div *ngIf=\"track\">\n    <header class=\"artist-header\">\n        <div *ngIf=\"track.album.images.length > 0\">\n            <img class=\"track-thumb rounded-circle\" src=\"{{track.album.images[0].url}}\">\n        </div>\n        <div class=\"track-deets-container\">\n            <h1>{{track.name}}</h1>\n            <h4 class=\"track-artist-header\" *ngFor=\"let artist of track.artists\">{{artist.name}} </h4>\n            <div class=\"track-link-container\">\n                <a class=\"track-preview\" href=\"{{track.preview_url}}\" target=\"_blank\">Preview track</a>\n                <a class=\"track-view\" href=\"{{track.external_urls.spotify}}\">View in Spotify</a>\n                <a class=\"btn btn-default btn-block\" routerLink=\"/album/{{track.album.id}}\">View Album Details</a>\n            </div>\n        </div>\n    </header>\n</div>","import { Injectable } from '@angular/core';\nimport { environment } from '../../environments/environment';\nimport { Http, Headers, Response, RequestOptions } from '@angular/http';\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class SpotifyService {\n\n    private searchUrl: string;\n    private artistUrl: string;\n    private albumsUrl: string;\n    private albumUrl: string;\n    private trackUrl: string;\n    private userUrl: string;\n    private playlistUrl: string;\n    private addToPlaylistUrl: string;\n    private clientID: string = environment.clientId;\n    private clientSecret: string = environment.clientSecret;\n\n    constructor(private _http:Http) {\n\n    }\n\n    getAuth = () => {\n\n        let headers = new Headers();\n        headers.append('Authorization', 'Basic ' + btoa(this.clientID + \":\" + this.clientSecret));\n        headers.append('Content-Type', 'application/x-www-form-urlencoded');\n\n        let params: URLSearchParams = new URLSearchParams();\n        params.set('grant_type', 'client_credentials');\n\n        let body = params.toString();\n\n        return this._http.post('https://accounts.spotify.com/api/token', body, { headers: headers })\n            .map(res => res.json());\n    }\n\n    searchMusic(query:string, type='artist', authToken:string) {\n\n        let headers = new Headers();\n        headers.append('Authorization', 'Bearer ' + authToken);\n\n        this.searchUrl = 'https://api.spotify.com/v1/search?query=' + query + '&offset=0&limit=20&type=' + type + '&market=US';\n\n        return this._http.get(this.searchUrl, { headers: headers })\n            .map(res => res.json());\n    }\n\n    getUri(name:string, type:string, authToken:string) {\n        let search = this.searchMusic(name, type, authToken);\n        return search.subscribe(res => res.uri)\n    }\n\n    getArtist(id:string, type='artist', authToken:string) {\n        \n        let headers = new Headers();\n        headers.append('Authorization', 'Bearer ' + authToken);\n\n        this.artistUrl = 'https://api.spotify.com/v1/artists/' + id;\n\n        return this._http.get(this.artistUrl, { headers: headers})\n            .map(res => res.json());\n    }\n\n    getAlbums(artistId:string, authToken:string) {\n        \n        let headers = new Headers();\n        headers.append('Authorization', 'Bearer ' + authToken);\n\n        this.albumsUrl = 'https://api.spotify.com/v1/artists/' + artistId + '/albums';\n\n        return this._http.get(this.albumsUrl, { headers: headers })\n            .map(res => res.json());\n    }\n\n    getAlbum(albumId:string, authToken:string) {\n\n        let headers = new Headers();\n        headers.append('Authorization', 'Bearer ' + authToken);\n        \n        this.albumUrl = 'https://api.spotify.com/v1/albums/' + albumId;\n        \n        return this._http.get(this.albumUrl, { headers: headers })\n            .map(res => res.json());\n    }\n\n    getTrack(trackId:string, authToken:string) {\n\n        let headers = new Headers();\n        headers.append('Authorization', 'Bearer ' + authToken);\n\n        this.trackUrl = 'https://api.spotify.com/v1/tracks/' + trackId;\n\n        return this._http.get(this.trackUrl, { headers: headers })\n            .map(res => res.json());\n    }\n\n    createPlaylist(\n        name:string = 'My Created Playlist', \n        isPublic: boolean = true, \n        description:string,\n        authToken:string) {\n\n        let headers = new Headers();\n        headers.append('Authorization', 'Bearer ' + authToken);\n\n        let body = {\n            name: name,\n            public: isPublic,\n            description: description\n        }\n\n        let userId = this.getUserProfile(authToken)\n                         .subscribe(user => {\n                            userId = user.id });\n\n        this.playlistUrl = 'https://api.spotify.com/v1/users/' + userId + '/playlists';\n\n        return this._http.post(this.playlistUrl, body, { headers: headers })\n            .map(res => res.json());\n    }\n\n    addTrackToPlaylist(playlistId:string, authToken:string, trackUri:string) {\n\n        let headers = new Headers()\n        headers.append('Authorization', 'Bearer '+ authToken)\n\n        this.addToPlaylistUrl = 'https://api.spotify.com/v1/playlists' + playlistId + '/tracks?uris=' + trackUri\n\n        return this._http.post(this.addToPlaylistUrl, { headers: headers })\n            .map(res => res.json())\n    }\n\n    private getUserProfile(authToken:string) {\n\n        let headers = new Headers();\n        headers.append('Authorization', 'Bearer ' + authToken);\n\n        this.userUrl = 'https://api.spotify.com/v1/me';\n\n        return this._http.get(this.userUrl, { headers: headers })\n            .map(res => res.json());\n    }\n}","import { FormControl, ValidatorFn, AbstractControl } from '@angular/forms';\n\nexport function forbiddenCharacterValidator(nameRe: RegExp): ValidatorFn {\n    return (control: AbstractControl): {[key: string]: any} | null => {\n      const forbidden = nameRe.test(control.value);\n      return forbidden ? {'forbiddenName': {value: control.value}} : null;\n    };\n  }","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  clientId: '1c45a2c5c4f64c67ae427e159549119d',\n  clientSecret: 'e19468d45daa4946bf9c1e85367f0a0a'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}